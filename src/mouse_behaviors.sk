interface MouseBehavior {
    def down(x int, y int)
    def move(x int, y int)
    def up(x int, y int)
    def scroll(x int, y int, deltaX double, deltaY double)
}

def canvasSpaceToGridSpace(canvasPosition Vector, canvasSize Vector, viewport Rect) Vector {
    const canvasSpaceUv = canvasPosition / canvasSize
    return viewport.pointAtUvCoordinate(canvasSpaceUv)
}

def canvasSpaceToGridSpace(canvasPosition Vector, controller Controller) Vector {
    return canvasSpaceToGridSpace(
        canvasPosition,
        Vector.new(controller.canvas.width, controller.canvas.height),
        controller.viewport
    )
}

############################################################################

class ClickDragMouseBehavior :: MouseBehavior {
    var _controller Controller

    var _onDownGridSpace Vector = null
    var _onDownViewport Rect = null

    def down(x int, y int) {
        _onDownViewport = _controller.viewport.clone
        _onDownGridSpace = _canvasSpaceToGridSpace(x, y)
    }

    def move(x int, y int) {
        if _onDownGridSpace == null {
            return
        }
        const onMoveGridSpace = _canvasSpaceToGridSpace(x, y)
        const delta = _delta(onMoveGridSpace)
        _controller.viewport.origin = _onDownViewport.origin + delta
        _controller.setCanvasCursor("move")
    }

    def up(x int, y int) {
        if _onDownGridSpace != null {
            const onUpGridSpace = _canvasSpaceToGridSpace(x, y)
            const delta = _delta(onUpGridSpace)
            if delta.length > 10 {
                _controller.viewport.origin = _onDownViewport.origin + delta
            } else {
                # Treat it as a click
                _controller.userClickGridSpace(_onDownGridSpace)
            }
        }

        _onDownGridSpace = null
        _onDownViewport = null
        _controller.setCanvasCursor("default")
    }

    def scroll(x int, y int, deltaX double, deltaY double) { }

    def _canvasSpaceToGridSpace(x int, y int) Vector {
        y = _controller.canvasSize.y as int - y
        if _onDownViewport == null {
            throw Error.new("Shouldn't call _gridSpaceFromCanvasSpace unless _onDownViewport is set")
        }

        return canvasSpaceToGridSpace(
            Vector.new(x, y),
            Vector.new(_controller.canvas.width, _controller.canvas.height),
            _onDownViewport
        )
    }

    def _delta(newLocation Vector) Vector {
        if _onDownGridSpace == null {
            throw Error.new("Shouldn't call _delta unless _onDownGridSpace is set")
        }

        return _onDownGridSpace - newLocation
    }
}

############################################################################

class ZoomMouseBehavior :: MouseBehavior {
    var _controller Controller

    def down(x int, y int) {}
    def move(x int, y int) {}
    def up(x int, y int) {}

    def scroll(x int, y int, deltaX double, deltaY double) {
        _controller.viewport = Zoom.zoomViewport(
            _controller.viewport,
            deltaY,
            Vector.new(x, y),
            _controller.canvasSize
        )
    }
}
