def getWebGLExtension(gl WebGLRenderingContext, name string) dynamic {
    const ext = gl.getExtension(name)
    if ext == null {
        throw Error.new("Unsupported WebGL extension with name \(name)")
    }
    return ext
}

class Seed {
    var position Vector
    var color Color
}

class Simulation {
    var _igloo Igloo

    # Width and height of Game of Life grid. It's always square.
    var gridSize int

    var _program Igloo.Program
    var _quadBuffer Igloo.Buffer
    var _sourceTexture Igloo.Texture
    var _destTexture Igloo.Texture
    var _framebuffer Igloo.FrameBuffer

    def new(igloo Igloo, gridSize_ int) {
        _igloo = igloo
        gridSize = gridSize_

        var gl = _igloo.gl
        getWebGLExtension(gl, "OES_texture_float")
        gl.disable(gl.DEPTH_TEST)

        _program = Igloo.Program.new(_igloo.gl, GLSLX_SOURCE_V_COPY_POSITION, GLSLX_SOURCE_F_GAME_OF_LIFE)
        _quadBuffer = igloo.array(Igloo.QUAD2)
        _sourceTexture = _igloo.texture(null, gl.RGBA, gl.REPEAT, gl.NEAREST, gl.FLOAT).blank(gridSize, gridSize)
        _destTexture = _igloo.texture(null, gl.RGBA, gl.REPEAT, gl.NEAREST, gl.FLOAT).blank(gridSize, gridSize)
        _framebuffer = _igloo.framebuffer

        # Need a list of seeds
        const seeds = [
            Seed.new(
                Vector.new(5, 5),
                Color.new(1, 0, 0)
            ),
            Seed.new(
                Vector.new(10, 10),
                Color.new(1, 1, 0)
            ),
            Seed.new(
                Vector.new(5, 10),
                Color.new(0, 1, 0)
            ),
            Seed.new(
                Vector.new(30, 30),
                Color.new(0, 0, 1)
            )
        ]

        # Seeds are encoded in the grid as a 4-type (isSeed, color, seedX, seedY)
        var rgba = Float32Array.new(gridSize * gridSize * 4)
        for seed in seeds {
            const coord = ((seed.position.x * gridSize + seed.position.y) * 4) as int
            rgba[coord] = 1.0 # isSeed = true
            rgba[coord + 1] = seed.color.toDouble # color
            rgba[coord + 2] = seed.position.x
            rgba[coord + 3] = seed.position.y
        }

        _sourceTexture.subset(rgba, 0, 0, gridSize, gridSize)
    }

    def gridTexture Igloo.Texture {
        return _sourceTexture
    }

    def userClickGridSpace(point Vector) {
        point = point.clone
        point.x = Math.max(Math.min(point.x, gridSize), 0)
        point.y = Math.max(Math.min(point.y, gridSize), 0)

        # Draw a single pixel at point
        const sample = Float32Array.new([1])
        setCellGrid(sample, point.x as int, point.y as int)
    }

    def setCellGrid(inputGrid Float32Array, offsetX int, offsetY int) {
        const textureWidth = (Math.sqrt(inputGrid.length) as int)
        const textureHeight = textureWidth
        var rgba = Float32Array.new(textureWidth * textureWidth * 4)
        for i in 0..inputGrid.length {
            var j = i * 4
            rgba[j + 0] = inputGrid[i] > 0.5 ? 1.0 : 0.0
            rgba[j + 1] = inputGrid[i] > 0.5 ? 1.0 : 0.0
            rgba[j + 2] = inputGrid[i] > 0.5 ? 1.0 : 0.0
            rgba[j + 3] = 1.0
        }
        _sourceTexture.subset(rgba, offsetX, offsetY, textureWidth, textureHeight)
    }

    def step {
        # The current simulation state is always in _sourceTexture
        # and we draw onto _destTexture. So...
        #
        # 1. Bind the _destTexture onto the framebuffer so that
        #    we'll draw onto it.
        #
        # 2. Bind _sourceTexture texture to index 0. This is
        #    passed to the shader by setting the
        #    cellGridTexture uniform below.
        #
        _framebuffer.attach(_destTexture)

        if !RELEASE {
            const gl = _igloo.gl
            var check = gl.checkFramebufferStatus(gl.FRAMEBUFFER)
            if check != gl.FRAMEBUFFER_COMPLETE {
                throw Error.new("Framebuffer completion issue")
            }
        }

        _sourceTexture.bind(0)
        _igloo.gl.viewport(0, 0, gridSize, gridSize)
        _program
            .use
            .attrib("quad", _quadBuffer, 2)
            .uniformi("cellGridTexture", 0)
            .uniform("cellGridSize", Float32Array.new([gridSize, gridSize]))
            .draw(_igloo.gl.TRIANGLE_STRIP, 4)

        # Swap the source and destination textures
        const tmp = _sourceTexture
        _sourceTexture = _destTexture
        _destTexture = tmp
    }
}