
interface MouseBehavior {
    def down(e HTMLMouseEvent)
    def move(e HTMLMouseEvent)
    def up(e HTMLMouseEvent)
}

class DrawSeedMouseBehavior :: MouseBehavior {
    var _controller PhotoDemoController
    var _isMouseDown = false

    def down(e HTMLMouseEvent) {
        _isMouseDown = true
        e.stopPropagation
        _controller.drawAtPoint(canvasMouseLocation(_controller.inputCanvas, e))
        _controller.onDraw(_controller)
    }

    def move(e HTMLMouseEvent) {
        if _isMouseDown {
            _controller.drawAtPoint(canvasMouseLocation(_controller.inputCanvas, e))
            _controller.onDraw(_controller)
        }
        e.stopPropagation
    }

    def up(e HTMLMouseEvent) {
        _controller.drawAtPoint(canvasMouseLocation(_controller.inputCanvas, e))
        _controller.onDraw(_controller)
        _isMouseDown = false
        e.stopPropagation
    }
}

class SeedSpiralMouseBehavior :: MouseBehavior {
    var _controller PhotoDemoController
    var _isMouseDown = false
    var _relativeSeedLocations List<Vector> = []

    var _angle = 0.0
    var _center Vector = Vector.new(0, 0)

    def new(controller PhotoDemoController) {
        _controller = controller
        _center = Vector.new(
            controller.seedCanvas.width / 2,
            controller.seedCanvas.height / 2
        )

        for radiusIndex = 0; radiusIndex < 20; radiusIndex++ {
            # Need more and more points as we get further out
            const numPoints = 10

            # Radius gets bigger as we get further out
            const radius = radiusIndex * radiusIndex

            for i = 0.0; i < numPoints; i++ {
                var x = radius * Math.cos((i / numPoints) * Math.PI * 2)
                var y = radius * Math.sin((i / numPoints) * Math.PI * 2)

                x += Math.random * 30 - 15
                y += Math.random * 30 - 15

                _relativeSeedLocations.append(Vector.new(x, y))
            }
        }

        _drawSeeds

        setInterval(=> {
            _angle += 0.005
            _controller.clearSeedCanvas
            _controller.drawImage
            _drawSeeds
            _controller.onDraw(_controller)
        }, 1000 / 60)
    }

    def _onMove(e HTMLMouseEvent) {
        _center = canvasMouseLocation(_controller.inputCanvas, e)

        _controller.clearSeedCanvas
        _controller.drawImage
        _drawSeeds
        _controller.onDraw(_controller)
    }

    def down(e HTMLMouseEvent) {
        _isMouseDown = true
        e.stopPropagation
        _onMove(e)
    }

    def move(e HTMLMouseEvent) {
        if _isMouseDown {
            _onMove(e)
        }
        e.stopPropagation
    }

    def up(e HTMLMouseEvent) {
        _controller.drawAtPoint(canvasMouseLocation(_controller.inputCanvas, e))
        _isMouseDown = false
        e.stopPropagation
    }

    def _drawIfOnCanvas(point Vector) {
        const maxWidth = _controller.seedCanvas.width
        if point.x > 0 && point.y > 0 && point.x < maxWidth && point.y < maxWidth {
            _controller.drawAtPoint(point)
        }
    }

    def _drawSeeds {
        for location in _relativeSeedLocations {
            _drawIfOnCanvas(_center + location.rotate(_angle))
        }
    }
}

class PhotoDemoController {
    # Canvas that user sees
    var inputCanvas HTMLCanvasElement
    var outputCanvas HTMLCanvasElement
    var _ctx CanvasRenderingContext2D

    # Canvas that isn't displayed to user. We pass this to the
    # Voronoi generator.
    var _seedCanvas HTMLCanvasElement
    var _seedCtx CanvasRenderingContext2D

    # Cached for performance since we use these on every draw
    var sourceImg HTMLImageElement
    var sourcePattern CanvasPattern

    var _isMouseDown = false

    # Set by someone else to hear when we draw
    var onDraw fn(PhotoDemoController)

    var _mouseBehaviors List<MouseBehavior> = []

    def new(inputCanvas_ HTMLCanvasElement, outputCanvas_ HTMLCanvasElement, onDraw_ fn(PhotoDemoController)) {
        inputCanvas = inputCanvas_
        outputCanvas = outputCanvas_
        onDraw = onDraw_
        _ctx = inputCanvas.getContext2D

        _seedCanvas = document.createElement("canvas") as HTMLCanvasElement
        _seedCtx = _seedCanvas.getContext2D
        _seedCanvas.width = inputCanvas.width
        _seedCanvas.height = inputCanvas.height

        sourceImg = document.getElementById("eye") as HTMLImageElement
        sourcePattern = _seedCtx.createPattern(sourceImg, "repeat")

        drawImage

        for canvas in [inputCanvas, outputCanvas] {
            canvas.addEventListener("mousedown", (e HTMLMouseEvent) => {
                for behavior in _mouseBehaviors { behavior.down(e) }
            })

            canvas.addEventListener("mousemove", (e HTMLMouseEvent) => {
                for behavior in _mouseBehaviors { behavior.move(e) }
            })

            canvas.addEventListener("mouseup", (e HTMLMouseEvent) => {
                for behavior in _mouseBehaviors { behavior.up(e) }
            })
        }

        _mouseBehaviors = [
            #DrawSeedMouseBehavior.new(self)
            SeedSpiralMouseBehavior.new(self)
        ]
    }

    def seedCanvas HTMLCanvasElement { return _seedCanvas }

    def _drawAtPoint(ctx CanvasRenderingContext2D, point Vector, fillStyle dynamic, size int) {
        ctx.beginPath
        ctx.rect(
            point.x as int,
            point.y as int,
            size,
            size
        )
        # TODO(ryan): Talk to Evan about this
        (ctx as dynamic).fillStyle = fillStyle
        ctx.fill
    }

    # Called by mouse behaviors

    def clearSeedCanvas {
        _seedCtx.clearRect(0, 0, _seedCanvas.width, _seedCanvas.height)
    }

    def drawImage {
        # Start out by drawing the source image in the canvas displayed
        # to the user
        _ctx.drawImage(sourceImg, 0.0, 0.0)
    }

    def drawAtPoint(point Vector) {
        _drawAtPoint(_ctx, point, "rgba(255, 255, 255, 0.5)", 4)

        # Pin the sourceImage pixels down onto the seed canvas
        # where the user is drawing
        _drawAtPoint(_seedCtx, point, sourcePattern, 1)
    }
}