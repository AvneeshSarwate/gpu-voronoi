
# A really simple way to draw on a canvas. Useful just for testing.

class PhotoDemoController {
    var _canvas HTMLCanvasElement
    var _ctx CanvasRenderingContext2D
    var _isMouseDown = false
    var colorIndex = 0
    var radius = 1
    var onDraw fn()

    def new(canvas HTMLCanvasElement) {
        _canvas = canvas
        _styleCanvas(canvas)
        _ctx = _canvas.getContext2D
        _drawInitialText

        document.addEventListener("keyup", (e HTMLKeyboardEvent) => {

        })

        _canvas.addEventListener("mousedown", (e HTMLMouseEvent) => {
            _isMouseDown = true
            e.stopPropagation
            _draw(Vector.new(e.offsetX, e.offsetY))
        })

        _canvas.addEventListener("mousemove", (e HTMLMouseEvent) => {
            if _isMouseDown {
                _draw(Vector.new(e.offsetX, e.offsetY))
            }
            e.stopPropagation
        })

        _canvas.addEventListener("mouseup", (e HTMLMouseEvent) => {
            _draw(Vector.new(e.offsetX, e.offsetY))
            _isMouseDown = false
            e.stopPropagation
        })
    }

    def _drawInitialText {
        _ctx.beginPath
        _ctx.fillStyle = "#000"
        _ctx.textAlign = "center"
        _ctx.font = "12pt Helvetica"
        _ctx.fillText("Drop an image here", _canvas.width / 2, _canvas.height / 2 + 6)
    }

    def _draw(point Vector) {
        _ctx.beginPath
        _ctx.rect(
            (point.x - radius) as int,
            (point.y - radius) as int,
            radius * 2,
            radius * 2
            )
        _ctx.fillStyle = Color.new(1, 1, 0, 1).toCSS
        _ctx.fill
        if onDraw != null {
            onDraw()
        }
    }

    def _styleCanvas(canvas HTMLCanvasElement) {
        canvas.style.backgroundColor = "white"
        canvas.width = DemoController.gridSize
        canvas.height = DemoController.gridSize
    }

}