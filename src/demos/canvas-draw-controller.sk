
# A really simple way to draw on a canvas. Useful just for testing.

var paintColors = [
    Color.fromHex(0x7500AC),
    Color.fromHex(0xDB50FF),
    Color.fromHex(0x4D00FF),
    Color.fromHex(0x9346FF),
    Color.fromHex(0x993AB2),
    Color.fromHex(0x3F54FF),
    Color.fromHex(0x0390FC),
    Color.fromHex(0xFFFFFF),
]

class CanvasDrawController {
    var _canvas HTMLCanvasElement
    var _ctx CanvasRenderingContext2D
    var _color Color = null
    var colorIndex = 0
    var radius = 1
    var onDraw fn()

    def new(canvas HTMLCanvasElement) {
        _canvas = canvas
        _styleCanvas(canvas)
        _ctx = _canvas.getContext2D

        document.addEventListener("keyup", (e HTMLKeyboardEvent) => {
            const KEY_C = 67
            if e.which == KEY_C {
                colorIndex = (colorIndex + 1) % paintColors.count
            }
        })

        const changeColorAndDraw = (point Vector) => {
            if point.x > 0 && point.y > 0 && point.x < _canvas.width && point.y < _canvas.height {
                _color = Color.new(
                    0.5 + Math.random * 0.4,
                    0.2,
                    0.3 + Math.random * 0.5,
                    1.0
                )
                _draw(point)
            }
        }

        var isMouseDown = false

        document.addEventListener("mousedown", (e HTMLMouseEvent) => {
            isMouseDown = true
            changeColorAndDraw(Vector.new(e.offsetX, e.offsetY))
        })

        _canvas.addEventListener("mousemove", (e HTMLMouseEvent) => {
            if isMouseDown {
                changeColorAndDraw(Vector.new(e.offsetX, e.offsetY))
            }
        })

        document.addEventListener("mouseup", (e HTMLMouseEvent) => {
            isMouseDown = false
        })

        document.addEventListener("mouseleave", (e HTMLMouseEvent) => {
            isMouseDown = false
        })
    }

    def _draw(point Vector) {
        _ctx.beginPath
        _ctx.rect(
            (point.x - radius) as int,
            (point.y - radius) as int,
            radius * 2,
            radius * 2
        )
        _ctx.fillStyle = _color.toCSS
        _ctx.fill
        if onDraw != null {
            onDraw()
        }
    }

    def _styleCanvas(canvas HTMLCanvasElement) {
        canvas.style.backgroundColor = "white"
        canvas.width = DemoController.gridSize
        canvas.height = DemoController.gridSize
    }

}