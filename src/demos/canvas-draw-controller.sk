
# A really simple way to draw on a canvas. Useful just for testing.

var paintColors = [
    Color.fromHex(0x7500AC),
    Color.fromHex(0xDB50FF),
    Color.fromHex(0x4D00FF),
    Color.fromHex(0x9346FF),
    Color.fromHex(0x993AB2),
    Color.fromHex(0x3F54FF),
    Color.fromHex(0x0390FC),
    Color.fromHex(0xFFFFFF),
]

class CanvasDrawController {
    var _inputCanvas HTMLCanvasElement
    var _outputCanvas HTMLCanvasElement
    var _ctx CanvasRenderingContext2D
    var _color Color = null
    var colorIndex = 0
    var radius = 1
    var _onDraw fn()

    def new(inputCanvas HTMLCanvasElement, outputCanvas HTMLCanvasElement, onDraw fn()) {
        _inputCanvas = inputCanvas
        _outputCanvas = outputCanvas
        _onDraw = onDraw

        _inputCanvas.style.backgroundColor = "white"
        _ctx = _inputCanvas.getContext2D

        document.addEventListener("keyup", (e HTMLKeyboardEvent) => {
            const KEY_C = 67
            if e.which == KEY_C {
                colorIndex = (colorIndex + 1) % paintColors.count
            }
        })

        var isMouseDown = false

        document.addEventListener("mousedown", (e HTMLMouseEvent) => {
            isMouseDown = true
             _changeColorAndDraw(canvasMouseLocation(_inputCanvas, e))
        })

        for canvas in [_inputCanvas, _outputCanvas] {
            canvas.addEventListener("mousemove", (e HTMLMouseEvent) => {
                if isMouseDown {
                    _changeColorAndDraw(canvasMouseLocation(_inputCanvas, e))
                }
            })
        }

        document.addEventListener("mouseup", (e HTMLMouseEvent) => {
            isMouseDown = false
        })

        document.addEventListener("mouseleave", (e HTMLMouseEvent) => {
            isMouseDown = false
        })

        _changeColorAndDraw(Vector.new(_inputCanvas.width / 2, _inputCanvas.height / 2))
    }

    def _changeColorAndDraw(point Vector) {
        if point.x > 0 && point.y > 0 && point.x < _inputCanvas.width && point.y < _inputCanvas.height {
            _color = Color.new(
                0.5 + Math.random * 0.4,
                0.2,
                0.3 + Math.random * 0.5,
                1.0
            )

            _ctx.beginPath
            _ctx.rect(
                (point.x - radius) as int,
                (point.y - radius) as int,
                radius * 2,
                radius * 2
            )
            _ctx.fillStyle = _color.toCSS
            _ctx.fill
            if _onDraw != null {
                _onDraw()
            }
        }
    }
}