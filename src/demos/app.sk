def sizeCanvas(canvas HTMLCanvasElement, size int) {
    canvas.width = (size * Browser.devicePixelRatio) as int
    canvas.height = (size * Browser.devicePixelRatio) as int
    canvas.style.width = "\(size)px"
    canvas.style.height = "\(size)px"
}

def sizeCanvas(canvas canvas, size int) canvas {
    canvas.width = (size * Browser.devicePixelRatio) as int
    canvas.height = (size * Browser.devicePixelRatio) as int
    canvas.style.width = "\(size)px"
    canvas.style.height = "\(size)px"
    return canvas
}

def getCanvas(container HTMLElement, className string, canvasSize int) HTMLCanvasElement {
    const canvas = (container as dynamic).getElementsByClassName(className)[0] as HTMLCanvasElement
    sizeCanvas(canvas, canvasSize)
    return canvas
}

def displayError(container HTMLElement) {
    container.innerHTML = ""
    container.textContent = "Demo disabled. Couldn't enable WebGL."
}

def tryOrDisplayError(container HTMLElement, tryBlock fn()) {
    try {
        tryBlock()
    } catch temp dynamic {
        displayError(container)
    }
}

const defaultLabelStyle Style = {
    "font-family": "'Lucida Grande', 'Lucida Sans Unicode', 'Lucida Sans', Geneva, Verdana, sans-serif"
}

def initializePaintDemo(container HTMLElement) {
    const inputCanvas = sizeCanvas(<canvas />, 256)
    const outputCanvas = sizeCanvas(<canvas />, 256)
    container.appendChild((
        <div style={ "text-align": "center" }>
            inputCanvas
            outputCanvas
        </div>
    ).rawElement)

    var jfa JumpFlood = null
    tryOrDisplayError(container, => {
        jfa = JumpFlood.new(outputCanvas.element)
    })

    if jfa != null {
        CanvasDrawController.new(inputCanvas.element, outputCanvas.element, => {
            jfa.computeAndDraw(inputCanvas.element)
        })
    }
}

def initializeFishDemo(container HTMLElement) {
    const inputCanvas = sizeCanvas(<canvas />, 256)
    const outputCanvas = sizeCanvas(<canvas />, 256)
    container.appendChild((
        <div style={ "text-align": "center" }>
            inputCanvas
            outputCanvas
        </div>
    ).rawElement)

    var jfa JumpFlood = null
    tryOrDisplayError(container, => {
        jfa = JumpFlood.new(outputCanvas.element)
    })

    if jfa != null {
        FishGameController.new(inputCanvas.element, outputCanvas.element, => {
            const opts = JumpFlood.Options.new
            opts.wrap = true
            jfa.computeAndDraw(inputCanvas.element, opts)
        })
    }
}

def initializePhotoDemo(container HTMLElement) {
    const inputCanvasStyle Style = {
        "width": "100%",
        "height": "100%",
        "position": "absolute",
        "top": "0",
        "left": "0"
    }

    const inputCanvas = sizeCanvas(<canvas style=inputCanvasStyle />, 256)
    const image = <img id="eye" src="images/eye.jpg" style=inputCanvasStyle />
    const outputCanvas = sizeCanvas(<canvas />, 256)

    container.appendChild((
        <div style={ "text-align": "center" }>
            <div style={ "display": "inline-block", "position": "relative", "width": "256px", "height": "256px" }>
                image
                inputCanvas
            </div>
            outputCanvas
        </div>
    ).rawElement)

    var jfa JumpFlood = null
    tryOrDisplayError(container, => {
        jfa = JumpFlood.new(outputCanvas.element)
    })

    if jfa != null {
        image.onload = => {
            PhotoDemoController.new(inputCanvas.element, outputCanvas.element, image.element, (photoController PhotoDemoController) => {
                jfa.computeAndDraw(photoController.seedCanvas)
            })
        }
    }
}

def initializeJfaPatternDemo(container HTMLElement) {
    const patternLabelStyle Style = {
        "margin-top": "20px",
        "display": "block",
        "margin": "20px auto"
    }
    patternLabelStyle.take(defaultLabelStyle)

    const patternSliderStyle Style = {
        "width": "226px",
        "display": "inline-block"
    }

    const patternCanvas = sizeCanvas(<canvas />, 256)
    const label = <div style=patternLabelStyle />
    const slider = <div style=patternSliderStyle />
    container.appendChild((
        <div style={ "text-align": "center" }>
            patternCanvas
            label
            slider
        </div>
    ).rawElement)

    const gridSize = 16
    const logicalCanvasSize = 256
    JFAPatternDemoController.new(patternCanvas.element, logicalCanvasSize, gridSize, label.rawElement, slider.rawElement)
}

def initializeSliderDemo(container HTMLElement) {
    const gridSize = 256
    const inputCanvas = sizeCanvas(<canvas />, gridSize)
    const outputCanvas = sizeCanvas(<canvas />, gridSize)

    const sliderLabelStyle Style = { "display": "inline-block", "text-align": "center", "width": "\(gridSize)px" }
    sliderLabelStyle.take(defaultLabelStyle)
    const label = <div style=sliderLabelStyle />
    const slider = <div style={ "width": "226px", "display": "inline-block" } />

    container.appendChild((
        <div style={ "text-align": "center" }>
            inputCanvas
            outputCanvas
            <div style={ "margin-top": "20px" }>
                label
                slider
            </div>
        </div>
    ).rawElement)

    SlidableMaxJFARoundDemoController.new(
        inputCanvas.element,
        outputCanvas.element,
        gridSize,
        label.rawElement,
        slider.rawElement,
        => { displayError(container) }
    )
}

def initializeDistanceDemo(container HTMLElement) {
    const inputCanvas = sizeCanvas(<canvas />, 256)
    const outputCanvas = sizeCanvas(<canvas />, 256)
    container.appendChild((
        <div style={ "text-align": "center" }>
            inputCanvas
            outputCanvas
        </div>
    ).rawElement)

    var jfa JumpFlood = null
    tryOrDisplayError(container, => {
        jfa = JumpFlood.new(outputCanvas.element)
    })

    if jfa != null {
        FishGameController.new(inputCanvas.element, outputCanvas.element, => {
            const opts = JumpFlood.Options.new
            opts.wrap = true
            opts.output = .DISTANCE_FIELD
            jfa.computeAndDraw(inputCanvas.element, opts)
        })
    }
}

def initializeShadowDemo(container HTMLElement) {
    const gridSize = 256
    const outputCanvas = sizeCanvas(<canvas />, gridSize)

    const labelStyle Style = {
        "display": "inline-block",
        "text-align": "right",
        "width": "55px",
        "margin-right": "40px"
    }
    labelStyle.take(defaultLabelStyle)

    const sliderStyle Style = {
        "display": "inline-block",
        "width": "226px"
    }

    const spreadLabel = (<span style=labelStyle>"Spread"</span>)
    const spreadSlider = <div style=sliderStyle />
    const blurLabel = (<span style=labelStyle>"Blur"</span>)
    const blurSlider = <div style=sliderStyle />

    const controlsContainerStyle Style = { "margin": "20px auto" }
    container.appendChild((
        <div style={ "text-align": "center" }>
            outputCanvas
            <div style=controlsContainerStyle>
                spreadLabel
                spreadSlider
            </div>
            <div style=controlsContainerStyle>
                blurLabel
                blurSlider
            </div>
        </div>
    ).rawElement)

    outputCanvas.element.getContext2D.scale(Browser.devicePixelRatio, Browser.devicePixelRatio)
    ShadowDemoController.new(
        container,
        gridSize,
        outputCanvas.element,
        spreadSlider.rawElement,
        blurSlider.rawElement
    )
}


@entry
def main {
    window.addEventListener("load", => {
        initializePaintDemo(document.getElementById("paint-demo-container"))
        initializeFishDemo(document.getElementById("fish-demo-container"))
        initializePhotoDemo(document.getElementById("photo-demo-container"))
        initializeJfaPatternDemo(document.getElementById("jfa-pattern-demo-container"))
        initializeSliderDemo(document.getElementById("slider-demo-container"))
        initializeDistanceDemo(document.getElementById("distance-demo-container"))
        initializeShadowDemo(document.getElementById("shadow-demo-container"))
    })
}

