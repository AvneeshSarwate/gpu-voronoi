@import
namespace console {
    const log dynamic
}

namespace DemoController {
    const cellSize = 1
}

class HTMLWindow {
    var onload dynamic
}

def initializePaintDemo(container HTMLElement) {
    const inputCanvas = (container as dynamic).getElementsByClassName("input-canvas")[0] as HTMLCanvasElement
    const outputCanvas =  (container as dynamic).getElementsByClassName("output-canvas")[0] as HTMLCanvasElement
    const demoController = DemoController.new(inputCanvas, outputCanvas)

    # A CanvasDrawController handles user draw-actions on the input canvas
    # Whenever the user draws, we re-render the voronoi diagram for the input
    const drawController = CanvasDrawController.new(inputCanvas)
    drawController.onDraw = () => {
        demoController.voronoi.setSeedsFromCanvas(inputCanvas)
        demoController.voronoi.computeVoronoi
    }
    demoController.start
}

def initializeFishDemo(container HTMLElement) {
    const inputCanvas = (container as dynamic).getElementsByClassName("input-canvas")[0] as HTMLCanvasElement
    const outputCanvas =  (container as dynamic).getElementsByClassName("output-canvas")[0] as HTMLCanvasElement
    const demoController = DemoController.new(inputCanvas, outputCanvas)

    const fishController = FishGameController.new(inputCanvas)
    fishController.onDraw = () => {
        demoController.voronoi.setSeedsFromCanvas(inputCanvas)
        demoController.voronoi.computeVoronoi
    }
    demoController.start
}

def initializePhotoDemo(container HTMLElement) {
    const inputCanvas = (container as dynamic).getElementsByClassName("input-canvas")[0] as HTMLCanvasElement
    const outputCanvas =  (container as dynamic).getElementsByClassName("output-canvas")[0] as HTMLCanvasElement
    const demoController = DemoController.new(inputCanvas, outputCanvas)

    const photoController = PhotoDemoController.new(inputCanvas)
    photoController.onDraw = () => {
        demoController.voronoi.setSeedsFromCanvas(photoController.seedCanvas)
        demoController.voronoi.computeVoronoi
    }
    demoController.start
}

@entry
def main {
    window.onload = => {
        initializePaintDemo(document.getElementById("paint-demo-container"))
        initializeFishDemo(document.getElementById("fish-demo-container"))
        initializePhotoDemo(document.getElementById("photo-demo-container"))
    }
}
