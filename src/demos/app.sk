@import
namespace console {
    const log dynamic
}

@import
def parseInt(toParse string, base int) int

class HTMLWindow {
    var onload dynamic
}

def getQueryVariable(variable string) string {
    var query = (window as dynamic).location.search.substring(1)
    var vars = query.split("&")
    for i=0; i < vars.length; i++ {
        var pair = vars[i].split("=")
        if pair[0] == variable {
            return pair[1]
        }
    }
    return null
}

def getCanvas(container HTMLElement, className string, canvasSize int) HTMLCanvasElement {
    const canvas = (container as dynamic).getElementsByClassName(className)[0] as HTMLCanvasElement
    canvas.width = canvasSize
    canvas.height = canvasSize
    canvas.style.width = "\(canvasSize)px"
    canvas.style.height = "\(canvasSize)px"
    return canvas
}

def createJumpFlood(outputCanvas HTMLCanvasElement, options JumpFlood.Options) JumpFlood {
    var jumpFlood JumpFlood = null
    # try {
        jumpFlood = JumpFlood.new(outputCanvas, options)
    # } catch temp dynamic {
    #     # Failed to initialize Web-GL. Display error.
    #     document.getElementById("demo-page").style.display = "none"
    #     document.getElementById("webgl-error").style.display = null
    #     throw temp
    # }
    return jumpFlood
}

def canvasMouseLocation(canvas HTMLCanvasElement, domMouseLocation Vector) Vector {
    const rect = canvas.getBoundingClientRect
    return Vector.new(
        (domMouseLocation.x / rect.width) * canvas.width,
        (domMouseLocation.y / rect.height) * canvas.height
    )
}

def canvasMouseLocation(canvas HTMLCanvasElement, event HTMLMouseEvent) Vector {
    return canvasMouseLocation(canvas, Vector.new(event.offsetX, event.offsetY))
}

def initializePaintDemo(container HTMLElement, antialiasingFactor int) {
    const inputCanvas = getCanvas(container, "input-canvas", 256)
    const outputCanvas = getCanvas(container, "output-canvas", 256)
    const opts = JumpFlood.Options.new
    opts.antialiasingFactor = antialiasingFactor
    const jfa = createJumpFlood(outputCanvas, opts)

    # A CanvasDrawController handles user draw-actions on the input canvas
    # Whenever the user draws, we re-render the voronoi diagram for the input
    CanvasDrawController.new(inputCanvas, outputCanvas, => {
        jfa.setSeedsFromCanvas(inputCanvas)
        jfa.computeVoronoi
        jfa.drawToOutputCanvas
    })
}

def initializeFishDemo(container HTMLElement, antialiasingFactor int) {
    const inputCanvas = getCanvas(container, "input-canvas", 256)
    const outputCanvas = getCanvas(container, "output-canvas", 256)
    const opts = JumpFlood.Options.new
    opts.wrap = true
    opts.antialiasingFactor = antialiasingFactor
    const jfa = createJumpFlood(outputCanvas, opts)

    FishGameController.new(inputCanvas, outputCanvas, => {
        jfa.setSeedsFromCanvas(inputCanvas)
        jfa.computeVoronoi
        jfa.drawToOutputCanvas
    })
}

def initializePhotoDemo(container HTMLElement, antialiasingFactor int) {
    const inputCanvas = getCanvas(container, "input-canvas", 256)
    const outputCanvas = getCanvas(container, "output-canvas", 256)
    const opts = JumpFlood.Options.new
    opts.antialiasingFactor = antialiasingFactor
    const jfa = createJumpFlood(outputCanvas, opts)

    PhotoDemoController.new(inputCanvas, outputCanvas, (photoController PhotoDemoController) => {
        jfa.setSeedsFromCanvas(photoController.seedCanvas)
        jfa.computeVoronoi
        jfa.drawToOutputCanvas
    })
}

@entry
def main {
    window.onload = => {
        var antialiasingFactor = 2

        try {
            const antialiasingFactorParam = getQueryVariable("antialiasingFactor")
            if antialiasingFactorParam != null {
                antialiasingFactor = parseInt(antialiasingFactorParam, 10)
            }
        }

        initializePaintDemo(document.getElementById("paint-demo-container"), antialiasingFactor)
        initializeFishDemo(document.getElementById("fish-demo-container"), antialiasingFactor)
        initializePhotoDemo(document.getElementById("photo-demo-container"), antialiasingFactor)
    }
}

