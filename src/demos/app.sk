
# TODO(ryan): If we want things to look smooth on Retina displays we should
# set canvas.width to devicePixelRatio * sizeUsedInCSS. But doing so makes
# things laggy on a Macbook Air. So let's improve performance before we do
# that.
def getCanvas(container HTMLElement, className string, canvasSize int) HTMLCanvasElement {
    const canvas = (container as dynamic).getElementsByClassName(className)[0] as HTMLCanvasElement
    canvas.width = (canvasSize * Browser.devicePixelRatio) as int
    canvas.height = (canvasSize * Browser.devicePixelRatio) as int
    canvas.style.width = "\(canvasSize)px"
    canvas.style.height = "\(canvasSize)px"
    return canvas
}

# Builds a Voronoi generator and displays an error on the page if we can't
# (likely because this browser doesn't support WebGL).
def createVoronoiGenerator(outputCanvas HTMLCanvasElement, options Voronoi.Options) Voronoi {
    var voronoi Voronoi = null
    try {
        voronoi = Voronoi.new(outputCanvas, options)
    } catch temp dynamic {
        # Failed to initialize Web-GL. Display error.
        document.getElementById("demo-page").style.display = "none"
        document.getElementById("webgl-error").style.display = null
        throw temp
    }
    return voronoi
}

def initializePaintDemo(container HTMLElement, antialiasingFactor int) {
    const inputCanvas = getCanvas(container, "input-canvas", 256)
    const outputCanvas = getCanvas(container, "output-canvas", 256)
    const opts = Voronoi.Options.new
    opts.antialiasingFactor = antialiasingFactor
    const voronooi = createVoronoiGenerator(outputCanvas, opts)

    # A CanvasDrawController handles user draw-actions on the input canvas
    # Whenever the user draws, we re-render the voronoi diagram for the input
    CanvasDrawController.new(inputCanvas, outputCanvas, => {
        voronooi.setSeedsFromCanvas(inputCanvas)
        voronooi.computeVoronoi
        voronooi.drawToOutputCanvas
    })
}

def initializeFishDemo(container HTMLElement, antialiasingFactor int) {
    const inputCanvas = getCanvas(container, "input-canvas", 256)
    const outputCanvas = getCanvas(container, "output-canvas", 256)
    const opts = Voronoi.Options.new
    opts.wrap = true
    opts.antialiasingFactor = antialiasingFactor
    const voronoi = createVoronoiGenerator(outputCanvas, opts)

    FishGameController.new(inputCanvas, outputCanvas, => {
        voronoi.setSeedsFromCanvas(inputCanvas)
        voronoi.computeVoronoi
        voronoi.drawToOutputCanvas
    })
}

def initializePhotoDemo(container HTMLElement, antialiasingFactor int) {
    const inputCanvas = getCanvas(container, "input-canvas", 256)
    const outputCanvas = getCanvas(container, "output-canvas", 256)
    const opts = Voronoi.Options.new
    opts.antialiasingFactor = antialiasingFactor
    const voronoi = createVoronoiGenerator(outputCanvas, opts)

    PhotoDemoController.new(inputCanvas, outputCanvas, (photoController PhotoDemoController) => {
        voronoi.setSeedsFromCanvas(photoController.seedCanvas)
        voronoi.computeVoronoi
        voronoi.drawToOutputCanvas
    })
}

def initializeDistanceDemo(container HTMLElement, antialiasingFactor int) {
    const inputCanvas = getCanvas(container, "input-canvas", 256)
    const outputCanvas = getCanvas(container, "output-canvas", 256)
    const opts = Voronoi.Options.new
    opts.wrap = true
    opts.antialiasingFactor = antialiasingFactor
    const voronoi = createVoronoiGenerator(outputCanvas, opts)

    FishGameController.new(inputCanvas, outputCanvas, => {
        voronoi.setSeedsFromCanvas(inputCanvas)
        voronoi.computeVoronoi
        voronoi.drawDistanceFieldToOutputCanvas
    })
}

def initializeThresholdDemo(container HTMLElement, antialiasingFactor int) {
    const inputCanvas = getCanvas(container, "input-canvas", 256)
    const outputCanvas = getCanvas(container, "output-canvas", 256)
    const opts = Voronoi.Options.new
    opts.wrap = true
    opts.antialiasingFactor = antialiasingFactor
    opts.minSeedDistanceThreshold = 15.0
    const voronoi = createVoronoiGenerator(outputCanvas, opts)

    FishGameController.new(inputCanvas, outputCanvas, => {
        voronoi.setSeedsFromCanvas(inputCanvas)
        voronoi.computeVoronoi
        voronoi.drawToOutputCanvas
    })
}

def initializeSliderDemo(container HTMLElement, antialiasingFactor int) {
    const inputCanvas = getCanvas(container, "input-canvas", 256)
    const outputCanvas = getCanvas(container, "output-canvas", 256)
    const opts = Voronoi.Options.new
    opts.antialiasingFactor = antialiasingFactor
    const voronooi = createVoronoiGenerator(outputCanvas, opts)

    const label = (container as dynamic).getElementsByClassName("jfa-round-label")[0] as HTMLElement
    const slider = (container as dynamic).getElementsByClassName("jfa-round-slider")[0]

    slider.min = 1
    slider.max = Math.log(inputCanvas.width) + 3
    slider.value = slider.max
    slider.step = 1

    const drawWithSteps = (steps int) => {
        label.textContent = "Round #\(slider.value)"
        voronooi.setSeedsFromCanvas(inputCanvas)
        voronooi.resetVoronoiSteps
        for i in 0..steps {
            voronooi.stepVoronoi
        }
        voronooi.drawToOutputCanvas
    }

    slider.oninput = (e HTMLEvent) => {
        drawWithSteps(slider.value)
    }
    # TODO(ryan) oninput not supported in IE10: http://stackoverflow.com/a/19067260
    #slider.onchange = func

    # A CanvasDrawController handles user draw-actions on the input canvas
    # Whenever the user draws, we re-render the voronoi diagram for the input
    CanvasDrawController.new(inputCanvas, outputCanvas, => {
        drawWithSteps(slider.value)
    })
}

@entry
def main {
    window.onload = => {
        var antialiasingFactor = 1

        try {
            const antialiasingFactorParam = Browser.getQueryVariable("antialiasingFactor")
            if antialiasingFactorParam != null {
                antialiasingFactor = parseInt(antialiasingFactorParam, 10)
            }
        }

        initializePaintDemo(document.getElementById("paint-demo-container"), antialiasingFactor)
        initializeFishDemo(document.getElementById("fish-demo-container"), antialiasingFactor)
        initializePhotoDemo(document.getElementById("photo-demo-container"), antialiasingFactor)
        initializeDistanceDemo(document.getElementById("distance-demo-container"), antialiasingFactor)
        initializeThresholdDemo(document.getElementById("threshold-demo-container"), antialiasingFactor)
        initializeSliderDemo(document.getElementById("slider-demo-container"), antialiasingFactor)
    }
}

