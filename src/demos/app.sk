@import
namespace console {
    const log dynamic
}

class HTMLWindow {
    var onload dynamic
}

def getCanvas(container HTMLElement, className string, gridSize int, canvasSize int) HTMLCanvasElement {
    const canvas = (container as dynamic).getElementsByClassName(className)[0] as HTMLCanvasElement
    canvas.width = gridSize
    canvas.height = gridSize
    canvas.style.width = "\(canvasSize)px"
    canvas.style.height = "\(canvasSize)px"
    return canvas
}

def createJumpFlood(outputCanvas HTMLCanvasElement, options JumpFlood.Options) JumpFlood {
    var jumpFlood JumpFlood = null
    try {
        jumpFlood = JumpFlood.new(outputCanvas, options)
    } catch temp dynamic {
        # Failed to initialize Web-GL. Display error.
        document.getElementById("demo-page").style.display = "none"
        document.getElementById("webgl-error").style.display = null
        throw temp
    }
    return jumpFlood
}

def canvasMouseLocation(canvas HTMLCanvasElement, domMouseLocation Vector) Vector {
    const rect = canvas.getBoundingClientRect
    return Vector.new(
        (domMouseLocation.x / rect.width) * canvas.width,
        (domMouseLocation.y / rect.height) * canvas.height
    )
}

def canvasMouseLocation(canvas HTMLCanvasElement, event HTMLMouseEvent) Vector {
    return canvasMouseLocation(canvas, Vector.new(event.offsetX, event.offsetY))
}

def initializePaintDemo(container HTMLElement) {
    const inputCanvas = getCanvas(container, "input-canvas", 512, 256)
    const outputCanvas = getCanvas(container, "output-canvas", 512, 256)
    const opts = JumpFlood.Options.new
    const jfa = createJumpFlood(outputCanvas, opts)

    # A CanvasDrawController handles user draw-actions on the input canvas
    # Whenever the user draws, we re-render the voronoi diagram for the input
    CanvasDrawController.new(inputCanvas, outputCanvas, => {
        jfa.setSeedsFromCanvas(inputCanvas)
        jfa.computeVoronoi
        jfa.drawToOutputCanvas
    })
}

def initializeFishDemo(container HTMLElement) {
    const inputCanvas = getCanvas(container, "input-canvas", 512, 256)
    const outputCanvas = getCanvas(container, "output-canvas", 512, 256)
    const opts = JumpFlood.Options.new
    opts.wrap = true
    const jfa = createJumpFlood(outputCanvas, opts)

    FishGameController.new(inputCanvas, outputCanvas, => {
        jfa.setSeedsFromCanvas(inputCanvas)
        jfa.computeVoronoi
        jfa.drawToOutputCanvas
    })
}

def initializePhotoDemo(container HTMLElement) {
    const inputCanvas = getCanvas(container, "input-canvas", 512, 256)
    const outputCanvas = getCanvas(container, "output-canvas", 512, 256)
    const opts = JumpFlood.Options.new
    const jfa = createJumpFlood(outputCanvas, opts)

    PhotoDemoController.new(inputCanvas, outputCanvas, (photoController PhotoDemoController) => {
        jfa.setSeedsFromCanvas(photoController.seedCanvas)
        jfa.computeVoronoi
        jfa.drawToOutputCanvas
    })
}

@entry
def main {
    window.onload = => {
        initializePaintDemo(document.getElementById("paint-demo-container"))
        initializeFishDemo(document.getElementById("fish-demo-container"))
        initializePhotoDemo(document.getElementById("photo-demo-container"))
    }
}
