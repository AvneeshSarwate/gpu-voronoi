@import
namespace console {
    const log dynamic
}

namespace DemoController {
    const cellSize = 1
}

class HTMLWindow {
    var onload dynamic
}

# TODO(ryan): A bunch of stuff depends on this constant. Name
# it something more sensible and have less stuff depend on it
# directly.
namespace DemoController {
    const gridSize = 256
}

def getCanvas(container HTMLElement, className string) HTMLCanvasElement {
    const canvas = (container as dynamic).getElementsByClassName(className)[0] as HTMLCanvasElement
    canvas.width = DemoController.gridSize
    canvas.height = DemoController.gridSize
    return canvas
}

def createJumpFlood(outputCanvas HTMLCanvasElement, size int) JumpFlood {
    var jumpFlood JumpFlood = null
    try {
        jumpFlood = JumpFlood.new(outputCanvas, size)
    } catch temp dynamic {
        # Failed to initialize Web-GL. Display error.
        document.getElementById("demo-page").style.display = "none"
        document.getElementById("webgl-error").style.display = null
        throw temp
    }
    return jumpFlood
}

def initializePaintDemo(container HTMLElement) {
    const inputCanvas = getCanvas(container, "input-canvas")
    const outputCanvas = getCanvas(container, "output-canvas")
    const jfa = createJumpFlood(outputCanvas, DemoController.gridSize)

    # A CanvasDrawController handles user draw-actions on the input canvas
    # Whenever the user draws, we re-render the voronoi diagram for the input
    const drawController = CanvasDrawController.new(inputCanvas)
    drawController.onDraw = () => {
        jfa.setSeedsFromCanvas(inputCanvas)
        jfa.computeVoronoi
        jfa.drawToOutputCanvas
    }
}

def initializeFishDemo(container HTMLElement) {
    const inputCanvas = getCanvas(container, "input-canvas")
    const outputCanvas = getCanvas(container, "output-canvas")
    const jfa = createJumpFlood(outputCanvas, DemoController.gridSize)

    const fishController = FishGameController.new(inputCanvas)
    fishController.onDraw = () => {
        jfa.setSeedsFromCanvas(inputCanvas)
        jfa.computeVoronoi
        jfa.drawToOutputCanvas
    }
}

def initializePhotoDemo(container HTMLElement) {
    const inputCanvas = getCanvas(container, "input-canvas")
    const outputCanvas = getCanvas(container, "output-canvas")
    const jfa = createJumpFlood(outputCanvas, DemoController.gridSize)

    const photoController = PhotoDemoController.new(inputCanvas)
    photoController.onDraw = () => {
        jfa.setSeedsFromCanvas(photoController.seedCanvas)
        jfa.computeVoronoi
        jfa.drawToOutputCanvas
    }
}

@entry
def main {
    window.onload = => {
        initializePaintDemo(document.getElementById("paint-demo-container"))
        initializeFishDemo(document.getElementById("fish-demo-container"))
        initializePhotoDemo(document.getElementById("photo-demo-container"))
    }
}
