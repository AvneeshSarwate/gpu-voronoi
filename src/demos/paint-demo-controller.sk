
namespace PaintDemoController {
    var gridSize = 256
}

class PaintDemoController {
    var _inputCanvas HTMLCanvasElement
    var _outputCanvas HTMLCanvasElement
    var _voronoi JumpFlood
    var _igloo Igloo

    var _program Igloo.Program
    var _quadBuffer Igloo.Buffer

    def new(inputCanvas HTMLCanvasElement, outputCanvas HTMLCanvasElement) {
        _inputCanvas = inputCanvas
        _outputCanvas = outputCanvas
        _sizeCanvas(inputCanvas)
        _sizeCanvas(outputCanvas)

        # Move the output canvas to the right of the input canvas
        outputCanvas.style.position = "absolute"
        outputCanvas.style.left = "\(gridSize)px"

        try {
            _voronoi = JumpFlood.new(outputCanvas, gridSize)
        } catch {
            # Failed to initialize Web-GL. Display error.
            document.getElementById("paint-demo").style.display = "none"
            document.getElementById("webgl-error").style.display = null
            return
        }

        # A CanvasDrawController handles user draw-actions on the input canvas
        # Whenever the user draws, we re-render the voronoi diagram for the input
        const drawController = CanvasDrawController.new(_inputCanvas)
        drawController.onDraw = () => {
            _voronoi.setSeedsFromCanvas(_inputCanvas)
            _voronoi.computeVoronoi
        }
    }

    def _sizeCanvas(canvas HTMLCanvasElement) {
        canvas.width = PaintDemoController.gridSize
        canvas.height = PaintDemoController.gridSize
    }

    def setCanvasCursor(cssCursor string) {
        _outputCanvas.style.cursor = cssCursor
    }

    def canvas HTMLCanvasElement {
        return _outputCanvas
    }

    def canvasSize Vector {
        return Vector.new(_outputCanvas.width, _outputCanvas.height)
    }

    def start {
        setInterval(() => {
            _voronoi.drawToOutputCanvas
        }, 60)
    }
}